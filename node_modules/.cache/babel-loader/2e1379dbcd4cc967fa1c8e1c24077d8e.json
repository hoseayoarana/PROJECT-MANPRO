{"ast":null,"code":"var _jsxFileName = \"G:\\\\TUGAS_KULIAH\\\\manpro\\\\footprint-calculator-masta\\\\src\\\\components\\\\App.js\";\nimport React from 'react';\nimport Sidebar from './Sidebar';\nimport './reset.css';\nimport Maps from './Maps/map';\nimport Trivia from './Trivia';\nimport './app.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      initialCenter: null,\n      currentLocation: '',\n      destination: '',\n      transportation: '',\n      amount: null,\n      renderMap: null,\n      renderMapWithTMode: null\n    };\n\n    this.componentDidMount = () => {\n      getYourLocation(this.showPosition, this.setInitialCenter);\n    };\n\n    this.setInitialCenter = () => {\n      this.setState({\n        initialCenter: {\n          lat: 49.2606,\n          lng: -123.246\n        }\n      });\n    };\n\n    this.showPosition = position => {\n      this.setState({\n        currentLocation: \"\".concat(position.coords.latitude, \",\").concat(position.coords.longitude),\n        initialCenter: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      });\n    };\n\n    this.setEmittedCO2 = amount => {\n      this.setState({\n        amount\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"outer-container\",\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      onChange: (fieldName, destination) => this.setState({\n        [fieldName]: destination\n      }),\n      onClick: transportation => this.setState({\n        transportation\n      }),\n      currentLocation: this.state.currentLocation,\n      destination: this.state.destination,\n      transportation: this.state.transportation,\n      renderMap: this.state.renderMap,\n      renderMapWithTMode: this.state.renderMapWithTMode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, (this.state.transportation === 'DRIVING' || this.state.transportation === 'TRANSIT') && this.state.amount ? React.createElement(\"p\", {\n      className: \"map_emission\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Your \", this.state.transportation, \" has emitted \", this.state.amount, ' ', \"kg of CO2.\") : null, this.state.initialCenter ? React.createElement(Maps, {\n      initialCenter: this.state.initialCenter,\n      origin: this.state.currentLocation,\n      destination: this.state.destination,\n      travelMode: this.state.transportation,\n      setEmittedCO2: this.setEmittedCO2,\n      setShouldUpdateMap: bool => this.setState({\n        shouldUpdateMap: bool\n      }),\n      shouldUpdateMap: this.state.shouldUpdateMap,\n      setTravelMode: travelMode => this.setState({\n        transportation: travelMode\n      }),\n      setRenderMapFunc: func => this.setState({\n        renderMap: func\n      }),\n      setRenderMapFuncWithTMode: func => this.setState({\n        renderMapWithTMode: func\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Maps\") : null)), React.createElement(Trivia, {\n      travelMode: this.state.transportation,\n      amount: this.state.amount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;\nexport const getYourLocation = (success, fail) => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(success, fail);\n  } else {\n    fail();\n  }\n};","map":{"version":3,"sources":["G:\\TUGAS_KULIAH\\manpro\\footprint-calculator-masta\\src\\components\\App.js"],"names":["React","Sidebar","Maps","Trivia","App","Component","state","initialCenter","currentLocation","destination","transportation","amount","renderMap","renderMapWithTMode","componentDidMount","getYourLocation","showPosition","setInitialCenter","setState","lat","lng","position","coords","latitude","longitude","setEmittedCO2","render","fieldName","bool","shouldUpdateMap","travelMode","func","success","fail","navigator","geolocation","getCurrentPosition"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Sidebar from './Sidebar';\nimport './reset.css';\nimport Maps from './Maps/map';\nimport Trivia from './Trivia';\nimport './app.css';\n\nclass App extends React.Component {\n  state = {\n    initialCenter: null,\n    currentLocation: '',\n    destination: '',\n    transportation: '',\n    amount: null,\n    renderMap: null,\n    renderMapWithTMode: null\n  };\n\n  componentDidMount = () => {\n    getYourLocation(this.showPosition, this.setInitialCenter);\n  };\n\n  setInitialCenter = () => {\n    this.setState({\n      initialCenter: {\n        lat: 49.2606,\n        lng: -123.246\n      }\n    });\n  };\n\n  showPosition = position => {\n    this.setState({\n      currentLocation: `${position.coords.latitude},${\n        position.coords.longitude\n      }`,\n      initialCenter: {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      }\n    });\n  };\n\n  setEmittedCO2 = amount => {\n    this.setState({ amount });\n  };\n\n  render() {\n    return (\n      <div id='outer-container' className='app'>\n        <div className='container'>\n          <Sidebar\n            onChange={(fieldName, destination) =>\n              this.setState({ [fieldName]: destination })\n            }\n            onClick={transportation => this.setState({ transportation })}\n            currentLocation={this.state.currentLocation}\n            destination={this.state.destination}\n            transportation={this.state.transportation}\n            renderMap={this.state.renderMap}\n            renderMapWithTMode={this.state.renderMapWithTMode}\n          />\n          <div className='map'>\n            {(this.state.transportation === 'DRIVING' ||\n              this.state.transportation === 'TRANSIT') &&\n            this.state.amount ? (\n              <p className='map_emission'>\n                Your {this.state.transportation} has emitted {this.state.amount}{' '}\n                kg of CO2.\n              </p>\n            ) : null}\n            {this.state.initialCenter ? (\n              <Maps\n                initialCenter={this.state.initialCenter}\n                origin={this.state.currentLocation}\n                destination={this.state.destination}\n                travelMode={this.state.transportation}\n                setEmittedCO2={this.setEmittedCO2}\n                setShouldUpdateMap={bool =>\n                  this.setState({ shouldUpdateMap: bool })\n                }\n                shouldUpdateMap={this.state.shouldUpdateMap}\n                setTravelMode={travelMode =>\n                  this.setState({ transportation: travelMode })\n                }\n                setRenderMapFunc={func => this.setState({ renderMap: func })}\n                setRenderMapFuncWithTMode={func =>\n                  this.setState({ renderMapWithTMode: func })\n                }\n              >\n                Maps\n              </Maps>\n            ) : null}\n          </div>\n        </div>\n        <Trivia\n          travelMode={this.state.transportation}\n          amount={this.state.amount}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nexport const getYourLocation = (success, fail) => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(success, fail);\n  } else {\n    fail();\n  }\n};\n"]},"metadata":{},"sourceType":"module"}